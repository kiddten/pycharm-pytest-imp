buildscript {
    project.ext.kotlin_version = '1.5.10'
    project.ext.ide_version = '222-EAP-SNAPSHOT'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '1.6.0'
}

project.ext {
    source_compatibility = '10'
    target_compatibility = '11'
}

apply plugin: 'kotlin'

group 'com.y4kstudios'
version '0.5.5'


sourceCompatibility = project.ext.source_compatibility
targetCompatibility = project.ext.target_compatibility

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = project.ext.target_compatibility
    }
}

repositories {
    mavenCentral()

    maven {
        name = "intellij-releases"
        url = uri("https://www.jetbrains.com/intellij-repository/releases")
    }
    maven {
        name = "intellij-snapshots"
        url = uri("https://www.jetbrains.com/intellij-repository/snapshots")
    }
    maven {
        name = "intellij-3rd-party"
        url = uri("https://cache-redirector.jetbrains.com/intellij-dependencies")
    }
    maven {
        name = "rd-snapshots"
        url = uri("https://www.myget.org/F/rd-snapshots/maven/")
    }
}

dependencies {
    compile 'org.tomlj:tomlj:1.0.0'
    compile 'ca.szc.configparser:java-configparser:0.2'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    testCompile group: 'junit', name: 'junit', version: '4.13.1'
}

configurations.all {
    resolutionStrategy.dependencySubstitution {
        // NOTE: release-380 appears to have been removed from the repo
        substitute module('org.jetbrains.kotlin:kotlin-reflect:1.4.32-release-380') using module("org.jetbrains.kotlin:kotlin-reflect:1.4.32")
    }
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    type.set('PY')
    version.set(ide_version)
    pluginName.set('pytest imp')

    plugins.set([
        'python',
        'PsiViewer:222-SNAPSHOT',
        'org.toml.lang:222.2270.19',
    ])

    patchPluginXml {
        changeNotes.set(extractChangeNotes())
        pluginDescription.set('''
            <p>pytest improvements plugin for PyCharm</p>
            <p>Improvements include:</p>
            <ul>
              <li>Support for custom test method/class naming from pytest.ini or pyproject.toml</li>
              <li>Support for pytest-lambda fixtures</li>
              <li>Proper scoping for pytest fixtures</li>
            </ul>
        ''')

        sinceBuild.set("212")
        untilBuild.set("222.*")
    }
}

publishPlugin {
    channels.set(['stable'])
    token.set(getProperty('publishToken'))
}

compileKotlin {
    kotlinOptions {
        jvmTarget = project.ext.target_compatibility
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = project.ext.target_compatibility
    }
}
[tasks.runIde, tasks.buildSearchableOptions].each { task ->
    // Avoid ClassNotFoundException: com.maddyhome.idea.copyright.psi.UpdateCopyrightsProvider
    // Source: https://github.com/Hannah-Sten/TeXiFy-IDEA/blob/951ffba6029c26e4936d53c781065a7d055a2a8b/build.gradle.kts#L144-L147
    task.jvmArgs "-Djava.system.class.loader=com.intellij.util.lang.PathClassLoader"
}
runIde {
    jvmArgs "-Didea.ProcessCanceledException=disabled"
}

// Very primitive changelog extraction code
// Source: https://github.com/JetBrains/ideavim/blob/d5055506b019b7cdb4ba786a086dfc9385a42705/build.gradle#L107-L129
def extractChangeNotes() {
    def header = '<ul>\n'
    def footer = '</ul>\n<p>See also the complete <a href="https://github.com/theY4Kman/pycharm-pytest-imp/blob/master/CHANGELOG.md">changelog</a>.</p>'

    def startLine, endLine, skipAfterStart
    startLine = "$version, "
    endLine = "----"
    skipAfterStart = 1

    def skipLines = 0
    def changeType = ''
    def startSaving = false
    def res = new StringBuilder(header)
    new File('./CHANGELOG.md').eachLine { line ->
        if (skipLines) {
            skipLines--
            return
        }

        if (startSaving) {
            if (line.startsWith(endLine)) {
                startSaving = false
            }
            else if (line.startsWith('**') && line.endsWith(':**')) {
                changeType = line.substring(2, line.length() - 3)
                changeType = changeType.replaceFirst('s$', '')
            }
            else if (line.startsWith(' - ')) {
                def item = line.substring(3)
                res.append("  <li><b>$changeType:</b> $item</li>").append('\n')
            }
        }
        else {
            if (line.startsWith(startLine)) {
                startSaving = true
                skipLines = skipAfterStart
            }
        }
    }

    res.append(footer)
    return res.toString()
}
