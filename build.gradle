buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.72"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.4.18'
}

apply plugin: 'kotlin'

group 'com.y4kstudios'
version '0.2'

sourceCompatibility = 1.8

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()

    maven { url "https://www.jetbrains.com/intellij-repository/releases" }
    maven { url "https://www.jetbrains.com/intellij-repository/snapshots" }
    maven { url "https://jetbrains.bintray.com/intellij-third-party-dependencies" }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// See https://github.com/JetBrains/gradle-intellij-plugin/
intellij {
    type 'PY'
    version '2020.2.1'
    pluginName 'pytest imp'

    plugins=['python', 'PsiViewer:202-SNAPSHOT.3', 'com.jetbrains.hackathon.indices.viewer:1.7']
}
patchPluginXml {
    changeNotes extractChangeNotes()
    pluginDescription '''
        <p>pytest improvements plugin for PyCharm</p>
        <p>Improvements include:</p>
        <ul>
          <li>Support for pytest-lambda fixtures</li>
          <li>Proper scoping for pytest fixtures</li>
        </ul>
    '''
}

publishPlugin {
    channels 'stable'
    token = getProperty('publishToken')
}

// Very primitive changelog extraction code
// Source: https://github.com/JetBrains/ideavim/blob/d5055506b019b7cdb4ba786a086dfc9385a42705/build.gradle#L107-L129
def extractChangeNotes() {
    def header = '<ul>\n'
    def footer = '</ul>\n<p>See also the complete <a href="https://github.com/theY4Kman/pycharm-pytest-imp/blob/master/CHANGELOG.md">changelog</a>.</p>'

    def startLine, endLine, skipAfterStart

    if (getVersion().toString().matches("\\d+\\.\\d+\\.\\d+")) {
        startLine = "_Available since $version"
        endLine = '_To Be Released..._'
        skipAfterStart = 0
    } else {
        startLine = "$version, "
        endLine = "----"
        skipAfterStart = 1
    }

    def skipLines = 0
    def changeType = ''
    def startSaving = false
    def res = new StringBuilder(header)
    new File('./CHANGELOG.md').eachLine { line ->
        if (skipLines) {
            skipLines--
            return
        }

        if (startSaving) {
            if (line.startsWith(endLine)) {
                startSaving = false
            }
            else if (line.startsWith('**') && line.endsWith(':**')) {
                changeType = line.substring(2, line.length() - 3)
                changeType = changeType.replaceFirst('s$', '')
            }
            else if (line.startsWith(' - ')) {
                def item = line.substring(3)
                res.append("  <li><b>$changeType:</b> $item</li>").append('\n')
            }
        }
        else {
            if (line.startsWith(startLine)) {
                startSaving = true
                skipLines = skipAfterStart
            }
        }
    }

    res.append(footer)
    return res.toString()
}
